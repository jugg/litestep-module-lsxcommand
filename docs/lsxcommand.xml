<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" href="lsdocs.xsl"?>
<!-- <!DOCTYPE lsdoc SYSTEM "lsdoc.dtd"> -->
<lsdoc>
<module filename="lsxcommand.dll" version="1.8.5" friendlyname="lsxcommand" type="console" load="mixed-mode">
	<!-- *Description*-->	
	<description header="What does lsxcommand.dll do?">
		The lsxcommand LoadModule is a text box that sits on your desktop.
		It will let you type !bangs, folder names, documents, apps, urls, etc
		and execute them. Think of it as a very customizable address bar :)<br />
		if you specify a border width and you dont have CommandNotMoveable set,
		you can drag it around by the border. there is a problem that some people
		are having where the mouse cursor is not set back to a normal cursor after
		it is off the text box. to fix this, use CommandNoCursorChange to stop 
		lsxcommand from changing the cursor.<br />
		just a tip: lots of programs names work in lsxcommand.. you can type stuff
		like 'notepad', 'icq', 'netscape', to start some programs instead of the 
		full path. the history is working great.<br />
		<b>Note:</b> Not all the text docs are in the html docs. All of the step.rc
		and bang commands are, but not all explanations. If you want to read more
		about the calculator, time, transparency, ... check lsxcommand.txt.
	</description>
	<author name="Visigoth (blkhawk, ilmcuts, jesus_mjjg, rabidcow, jugg, Seg@)" email="litestep[AT]litestep[DOT]wuzzle[DOT]org" />
	<!-- ******************************************************************************** -->
	<!--**************************Positioning***************************-->
	<command name="CommandX">
	    <integer default="0" />
	    <description>
	    	x position on the screen.
	    </description>
	</command>
	<command name="CommandY">
	    <integer default="0" />
	    <description>
	    	y position on the screen.
	    </description>
	</command>
	<command name="CommandWidth">
	    <integer default="160" />
	    <description>
	    	width in pixels.
	    </description>
	</command>
	<command name="CommandHeight">
	    <integer default="20" />
	    <description>
	    	height in pixels.
	    </description>
	</command>
	<command name="CommandNotAlwaysOnTop">
	    <bool default="false"/>
	    	overides the default of being Always On Top of other windows.
	    <description>
	</description>
	</command>
	<command name="CommandHiddenOnStart">
	    <bool default="false"/>
	    <description>
	    	start hidden
	    </description>
	</command>
	<!--******************Special positioning settings******************-->
	<command name="CommandOffsetX">
	    <integer default="0" />
	    <description>
	    	This value determines which point on the screen LSXCommand should use as a reference
	    	for the CommandX value.<br />
	    	0: left -  1: horizontal center 2: right
	    </description>
	</command>
	<command name="CommandOffsetY">
	    <integer default="0" />
	    <description>
	    	This value determines which point on the screen LSXCommand should use as a reference
	    	for the CommandY value.<br />
	    	0: top - 1: horizontal center - 2: bottom
	    </description>
	</command>
	<command name="CommandBevelBorder">
	    <bool default="false"/>
	    <description>
	    	Use bevels instead of borders.
	    </description>
	</command>
	<!--*****************************LsBox******************************-->
	<command name="CommandWaitForBox">
	    <bool default="false"/>
	    <description>
	    	LsxCommand will not appear until he is loaded in a box with the !CommandBoxHook.<br />
	    	Please check lsbox documentation.
	    </description>
	</command>
	<!--************************Border and text*************************-->
	<command name="CommandBorderSize">
	    <integer default="-1" />
	    <description>
	    	Width in pixels of the border.<br />
	    	If you want to have different sized borders on each side, use CommandTopBorderSize,
	    	CommandBottomBorderSize, CommandLeftBorderSize, and CommandRightBorderSize.
	    </description>
	</command>
	<command name="CommandBottomBorderSize">
	    <integer default="2" />
	    <description>
	    	Height in pixels of the bottom border, overrides $CommandBorderSize$ for that border.
	    </description>
	</command>
	<command name="CommandTopBorderSize">
	    <integer default="2" />
	    <description>
	    	Height in pixels of the top border, overrides $CommandBorderSize$ for that border.
	    </description>
	</command>
	<command name="CommandLeftBorderSize">
	    <integer default="2" />
	    <description>
	    	Width in pixels of the left border, overrides $CommandBorderSize$ for that border.
	    </description>
	</command>
	<command name="CommandRightBorderSize">
	    <integer default="2" />
	    <description>
	    	Width in pixels of the right border, overrides $CommandBorderSize$ for that border.
	    </description>
	</command>
	<command name="CommandTextSize">
	    <integer default="14" />
	    <description>
	    	pixel size of the text
	    </description>
	</command>
	<command name="CommandTextBold">
	    <bool default="false"/>
	    <description>
	    	Is the text going to be bold.
	    </description>
	</command>
	<command name="CommandTextUnderline">
	    <bool default="false"/>
	    <description>
	    	Is the text going to be underlined.
	    </description>
	</command>
	<command name="CommandTextItalic">
	    <bool default="false"/>
	    <description>
	    	Is the text going to be italic.
	    </description>
	</command>
	<!--***************************Skinning*****************************-->
	<!--(see also lsxcommand.txt,section II.7 Backgrounds and Transparencies)-->
	<command name="CommandBGColor">
	    <color default="FFFFFF"/>
	    <description>
	    	background color
	    </description>
	</command>
	<command name="CommandBackground">
	    <image default=""/>
	    <description>
	    	Path to your background image. If this is not an absolute path, LSXCommand looks in
	    	your images directory.<br />
	    	<b>Note:</b> If this option is not specified, the background and border colors are used.
	    </description>
	</command>
	<command name="CommandStretchBackground">
	    <bool default="false"/>
	    <description>
	    	If set to true, the background image will be stretched.
	    </description>
	</command>
	<command name="CommandTransparentEditBox">
	    <bool default="false"/>
	    <description>
	    	Makes the area in which you type transparent to the background. If this option is
	    	not specified, the background image shows through.<br />
	    	If there is no background, the background color is used.
	    </description>
	</command>
	<command name="CommandTextColor">
	    <color default="000000"/>
	    <description>
	    	text color
	    </description>
	</command>
	<command name="CommandBorderColor">
	    <color default="666666"/>
	    <description>
	    	color of the border
	    </description>
	</command>
	<command name="CommandTextFontFace">
	    <string default="Arial"/>
	    <description>
	    	font for the text
	    </description>
	</command>
	<!--************************Various settings************************-->
	<command name="CommandNotMoveable">
	    <bool default="false"/>
	    <description>
	    	if this is set you will not be able to drag it around by the border
	    </description>
	</command>
	<command name="CommandNoCursorChange">
	    <bool default="false"/>
	    <description>
	    	does not change mouse cursor when over the text box
	    </description>
	</command>
	<command name="CommandAssumeNetAddress">
	    <bool default="false"/>
	    <description>
	    	If a command just doesn't cut it, you can have it start your browser with the address.
	    </description>
	</command>
	<command name="CommandExplorePaths">
	    <bool default="false"/>
	    <description>
	    	If enabled, any directory path you enter into LSXCommand will open a treed explorer window, instead of the standard folder window.
	    </description>
	</command>
	<!--****************************History*****************************-->
	<!--(see also lsxcommand.txt,section II.5 Tab-MicroComplete and Context Menu Access).-->
	<command name="CommandHistoryFile">
	    <string default="$LitestepDir$\modules.ini"/>
	    <description>
	    	Specifies the file lsxcommand stores its history in.
	    </description>
	</command>
	<command name="CommandHistoryEntries">
	    <integer default="10" />
	    <description>
	    	Sets number of history entries of which to keep track.
	    	<b>Note:</b> I haven't really stress-tested LSXCommand, so I don't know how well
	    	it scales up, but it shouldn't be too taxing even at somewhere around 50 entries.
	    	But I think that's a bit much anyway...
	    </description>
	</command>
	<command name="CommandHistoryMenuEntries">
	    <integer default="$CommandHistoryEntries-1$" />
	    <description>
	    	Sets the maximum number of history entries available from the context menu.
	    </description>
	</command>
	<command name="CommandClearHistoryOnStartup">
	    <bool default="false"/>
	    <description>
	    	Clears the history on startup.<br />
	    	<b>Note:</b> You *will* lose the history in $CommandHistoryFile$ - not only the history in memory.
	    </description>
	</command>
	<command name="CommandNewestHistoryItemsOnTop">
	    <bool default="false"/>
	    <description>
	    	This setting places newer history items at the top of the menu, instead of at the bottom.
	    </description>
	</command>
	<command name="CommandUnixHistory">
	    <bool default="false"/>
	    <description>
	    	The most popular UNIX shell (bash) has the inverse history navigation: Up for previous, down for next. You can use this system with this setting.
	    </description>
	</command>
	<command name="CommandAddExternalsToHistory">
	    <bool default="false"/>
	    <description>
	    	If this is on, LSXCommand will add any commands launched with the !Command !Bang command to the history. Since I've been using AlterScript with this a lot, it became annoying to have all of AlterScript's commands end up in LSXCommand's history.
	    </description>
	</command>
	<!--*************************Context menu***************************-->
	<command name="CommandContextMenuStandardItems">
	    <integer default="0" />
	    <description>
	    	This item does two things. It first turns on the standard menu items: Cut, Copy and Paste. Second, it tells where to put the standard items, above or below the LSXCommand specific menus.<br />
	    	Example:<br />
	    	CommandContextMenuStandardItems 1 ; Above<br />
	    	CommandContextMenuStandardItems 2 ; Below<br />
	    	CommandContextMenuStandardItems 0 ; Off (Default)
	    </description>
	</command>
	<command name="CommandContextMenuAboveBox">
	    <bool default="false"/>
	    <description>
	    	If you have your LSXCommand window at the bottom of the screen, you will want to turn
	    	this on.  If at the top, leave this off.  This sets where the context menu will appear
	    	- above or below the LSXCommand box.
	    </description>
	</command>
	<command name="CommandContextMenuExecute">
	    <bool default="false"/>
	    <description>
	    	Tells LSXCommand to execute a selection from the context menu instead of copying its
	    	data to the LSXCommand box.<br />
	    	<b>Note:</b> Since the point of search engines is to have you enter a search phrase,
	    	it is not possible to have search engines execute.
	    </description>
	</command>
	<command name="CommandContextMenuOrder">
	    <string default="012"/>
	    <description>
	    	Specifies which order each submenu should appear.<br />
	    	For instance, you can have History, Alias, then Search Engines or Alias, History,
	    	Search Engines, or...<br />
	    	The setting is 3 numbers: 0, 1, and 2. The combination of these numbers sets in
	    	which order each submenu appears. The first number is the position of the History
	    	submenu. The second is the Alias submenu. And the last is the Search Engines submenu.
	    </description>
	</command>
	<command name="CommandContextMenuAutoPopup">
	    <bool default="false"/>
	    <description>
		If you set this to true, then everytime the mouse will come over the lsxcommand box,
		the contect menu will appear.
	    </description>
	</command>
	<!--***********************CommandOn settings***********************-->
	<command name="CommandNoWarnOnError">
	    <bool default="false"/>
	    <description>
	    	If there is an error (for instance, if the command you entered is invalid or the
	    	calculator couldn't evaluate the expression you entered), you will get an error
	    	message. This, when turned on, will suppress it.
	    </description>
	</command>
	<command name="CommandHideOnCommand">
	    <bool default="false"/>
	    <description>
	    	Hides lsxcommand when a command is issued.
	    </description>
	</command>
	<command name="CommandHideOnEsc">
	    <bool default="false"/>
	    <description>
	    	Hides lsxcommand when Esc key pressed.
	    </description>
	</command>	<command name="CommandSelectAllOnFocus">
	    <bool default="false"/>
	    <description>
	    	Selects everything in the command box on focus.
	    </description>
	</command>
	<command name="CommandSelectAllOnMouseFocus">
	    <bool default="false"/>
	    <description>
	    	Just like CommandSelectAllOnFocus, just that it only works when clicking to focus
	    	LSXCommand.<br />
	    	The reason these are two separate options is for people like me: I like to be able
	    	to just click once to put the cursor where I want it -not select the entire command.
	    	But, some people like the explorer way of doing things better, so I added it.
	    </description>
	</command>
	<command name="CommandHideOnUnfocus">
	    <bool default="false"/>
	    <description>
	    	Hides LSXCommand when it loses keyboard focus. This can be used to hide LSXCommand
	    	after it runs an app.
	    </description>
	</command>
	<command name="CommandNoClearOnCommand">
	    <bool default="false"/>
	    <description>
	    	wont clear the input after you hit enter
	    </description>
	</command>
	<command name="CommandClearOnHide">
	    <bool default="false"/>
	    <description>
	    	clear the text when mod is hidden
	    </description>
	</command>
	<command name="CommandOnFocus">
	    <string default="!none"/>
	    <description>
	    	Will execute a command when you !FocusCommand (or when you focus it with the mouse).
	    </description>
	</command>
	<command name="CommandOnUnfocus">
	    <string default="!none"/>
	    <description>
	    	 Will execute a command when you un-focus lsxcommand (get out of the edit box)
	    </description>
	</command>
	<!--*****************************Clock******************************-->
	<command name="CommandTime">
	    <string default=""/>
	    <description>
	    	Format string that tells LSXCommand how you want your time and date to look.<br />
	    	(see lsxcommand.txt, section II.8 Clock Settings).
	    </description>
	</command>
	<command name="CommandClockDisappearsOnFocus">
	    <bool default="false"/>
	    <description>
	    	If you want the clock to automatically disappear when you click in LSXCommand, set
	    	this on. Otherwise, the clock will "pause" at the current time/date. This makes it
	    	easier for you to copy/paste the time and date into any app.
	    </description>
	</command>
	<!--****************************Winamp******************************-->
	<!--Winamp-->
	<command name="CommandScrollWinAmpTitle">
	    <bool default="false"/>
	    <description>
	    	If on, this setting takes WinAmp's scrolling title and displays it in LSXCommand.
	    	Note that WinAmp's scroll song title preference must be on for this to happen.
	    	A neat trick with this is to have both a clock and a WinAmp scroller. The WinAmp
	    	scroller will show when WinAmp is running. If not, the clock will show.
	    </description>
	</command>
	<command name="CommandWinAmpDisappearsOnFocus">
	    <bool default="false"/>
	    <description>
	    	Just like CommandClockDisappearsOnFocus, but for the WinAmp scrolling feature.
	    </description>
	</command>
	<command name="CommandMusicPlayer">
	    <string default="WINAMP V1.X"/>
	    <description>
	    	This command enables LSXCommand to use the titles of other music players besides
	    	WinAmp. You should set it to the class name of the application you are looking for.
	    </description>
	</command>
	<!--**********************CommandTab settings***********************-->
	<command name="CommandNoTabMicroComplete">
	    <bool default="false"/>
	    <description>
	    	Stops Tab-MicroCompletes from taking place. When you are typing in LSXCommand and
	    	get an autocompletion, you may want to automatically go on to the next word.<br />
	    	see also lsxcommand.txt, section II.5 Tab-MicroComplete and Context Menu Access
	    </description>
	</command>
	<command name="CommandTabFileComplete">
	    <bool default="false"/>
	    <description>
	    	Enables the completion of file names by using the tab key.<br />
	    	see also lsxcommand.txt, section II.9 Tab File Completion
	    </description>
	</command>
	<command name="CommandNoAutoComplete">
	    <bool default="false"/>
	    <description>
	    	Turns *off* AutoComplete. Someone asked for it, so I coded it :).
	    </description>
	</command>
	<command name="CommandCommaDelimiter">
	    <bool default="false"/>
	    <description>
	    	Some Eurpoean countries use commas as decimal delimiters, so this changes decimals
	    	from periods to commas.
	    </description>
	</command>
	<command name="CommandRPNCalculator">
	    <bool default="false"/>
	    <description>
	    	Makes the calculator an RPN calculator. If you don't know what this is, don't use
	    	it! You'll only confuse yourself. Others call RPN "Postfix" notation. If you want
	    	to learn more, obtain a Hewlett-Packard RPN calculator (the 48/49 series are
	    	especially nice, IMO :).
	    </description>
	</command>
	<command name="CommandSearchEngineList">
	    <string default="engines.list"/>
	    <description>
	    	The path to your engines.list - the list of search engines to use with LSXCommand.<br />
	    	see also lsxcommand.txt, section II.4 The engines.list File.
	    </description>
	</command>
	<command name="CommandSearchEngineBrowser">
	    <string default=""/>
	    <description>
	    	Path to the browser to be used with search engines. If not specified, LSXCommand
	    	uses the default browser on your system.
	    </description>
	</command>
	<!-- ******************************************************************************** -->
	<bang name="ToggleCommand">
	    <description>
	    	Toggle lsxcommand visibility.
	    </description>
	</bang>
	<bang name="FocusCommand">
	    <description>
	    	Set focus to command (nice for binding to hotkeys).
	    </description>
	</bang>
	<bang name="CommandRescanEngines">
	    <description>
	    	Rescans the engines.list file.<br />
	    	<b>Note:</b> it does not load a new engines.list file if specified in the step.rc;
	    	it will attempt to reload the same engines.list file.
	    </description>
	</bang>
	<bang name="CommandClearHistory">
	    <description>
	    	Clears both the history in memory *and* the history in $CommandHistoryFile$.
	    </description>
	</bang>
	<bang name="CommandShowContextMenu">
	    <description>
	    	Makes LSXCommand's Context Menu visible wherever the cursor is on the screen,
	    	regardless of LSXCommand's visibility.
	    </description>
	</bang>
	<bang name="Command">
	    <description>
	    	Now use the power of LSXCommand anywhere within Litestep! Shortcuts, wharf items,
	    	whatever that can run !bang commands outside of its own can now use LSXCommand.
	    </description>
	</bang>
	<bang name="CommandShow">
	    <description>
	    	Just shows LSXCommand.<br />
	    	<b>Note:</b> It does *not* give LSXCommand focus. To do this, use !FocusCommand
	    	- this command gives focus to LSXCommand, and if it's not visible, it shows it also.
	    </description>
	</bang>
	<bang name="CommandHide">
	    <description>
	    	Just hides LSXCommand. Nothing really special.
	    </description>
	</bang>
	<bang name="CommandBrowseFile">
	    <description>
	    	Brings up an Open Dialog Box to browse for a file for LSXCommand to open.
	    	It's just the same as typing in the file's name.<br />
	    	Note: You can send an argument to this !Bang command to specify the filter for
	    	the open box.<br />
	    	For instance, to see just Text Files, you might do this: !CommandBrowseFile All
	    	Text Files (*.txt, *.ini)|*.txt;*.ini
	    </description>
	</bang>
	<bang name="CommandBrowseFolder">
	    <description>
	    	Brings up a folder selection dialog. You can select a folder to browse to.
	    	There are no arguments for this !Bang command.
	    </description>
	</bang>
	<bang name="CommandMove">
	    <description>
	    	Moves the LSXCommand window either to an absolute position, or by a delta along
	    	each axis. The horizontal and vertical values can be configured separately (you
	    	can mix absolute and delta values).<br />
	    	If the horizontal or vertical values are surrounded by parentheses, they are
	    	interpreted as absolute values. Otherwise, they are interpreted as +/- deltas along
	    	their respective axis.<br />
	    	If there is only one parameter, it is interpreted as a horizontal value.<br />
	    	!CommandMove 0 100 ; moves it 100 pixels down<br />
	    	When !CommandMove is called without parameters, it moves to the current mouse cursor
	    	position.<br />
	    	If !CommandMove is called with "home" as its parameter, it moves back to the
	    	original position it received from step.rc
	    </description>
	</bang>
	<bang name="CommandToggleTimer">
	    <description>
	    	Toggles the current timer. If you use this, the WinAmp timer no longer takes
	    	precedence over the clock.<br />
	    	You have to call this !Bang again for the WinAmp scroller to appear.
	    </description>
	</bang>
	<bang name="CommandSetText">
	    <description>
	    	This !Bang sets the text in LSXCommand to its arguments.<br />
	    	This makes for some really neat stuff (for instance, a shortcut that pops up
	    	LSXCommand with a question mark and a space already in it ready for an argument
	    	to search with).<br />
	    	<b>Note</b>: this !Bang command does not show LSXCommand if it is hidden.<br />
	    	Example: !SetText "?Altavista "
	    </description>
	</bang>
	<bang name="CommandBoxHook">
	    <description>
	    	This is used with lsbox: *ModuleHook !CommandBoxHook<br />
	    	Please, check LsBox documentation
	    </description>
	</bang>
	<!-- *Changelog*-->
	<changelog>
		<version id="1.8.6 (jugg, Seg@)">
			<entry>Added CommandHideOnEsc.</entry>
			<entry>Fixed invalid buffer size for OnFocus/OnUnfocus actions.</entry>
			<entry>Fixed trailing spaces bug.</entry>
			<entry>Commands history is written without expanded eVars now</entry>
			<entry>Fixed transparent editboxes managing (nobody uses them though ;) )</entry>
			<entry>Minor updates for used functions: module uses newer LS APIs now</entry>
		</version>
		<version id="1.8.5 (jesus_mjjg/ilmcuts)">
			<entry>Added CommandStretchBackground.</entry>
			<entry>Added CommandTextBold, CommandTextUnderline and CommandTextItalic.</entry>		
			<entry>Fixed multiple access violations.</entry>
			<entry>Fixed some pointers being used without any prior validation.</entry>
			<entry>Docs/XML converted to the Litestep "official" format ... a lot more work to do though, stay tuned.</entry>
		</version>
	</changelog>
	<copyright>(c) 2003 <url src="http://lsdocs.litestep.net/">LiteStep Documentation Project</url></copyright>
</module>
</lsdoc>